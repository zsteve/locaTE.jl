(undo-tree-save-format-version . 1)
"c592e853e1697738774110b028fe419ca339a1b2"
[nil nil nil nil (25315 34749 467088 373000) 0 nil]
([nil nil ((nil rear-nonsticky nil 1 . 2) (#("
" 0 1 (fontified nil)) . -189) (1 . 190) (t . -1)) nil (25315 34749 467085 998000) 0 nil])
([nil nil ((#("

" 0 1 (fontified t rear-nonsticky t) 1 2 (fontified t)) . 1) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -2) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1)) nil (25315 34749 467076 849000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -186) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) 187 (t 25315 34749 472507 707000)) nil (25315 34853 677604 936000) 0 nil])
([nil nil ((186 . 187)) nil (25315 34853 677443 183000) 0 nil])
([nil nil ((nil rear-nonsticky nil 186 . 187) (#("
" 0 1 (fontified nil)) . -812) (186 . 813) 185 (t 25315 34853 681935 864000)) nil (25315 34861 906005 526000) 0 nil])
([nil nil ((186 . 187)) nil (25315 34861 905997 494000) 0 nil])
([nil nil ((nil rear-nonsticky nil 814 . 815) (#("
" 0 1 (fontified nil)) . -4967) (814 . 4968) (t 25315 34861 911890 702000)) nil (25315 34875 952581 494000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 814) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1)) nil (25315 34875 952572 973000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4966 . 4967) (#("
" 0 1 (fontified nil)) . -5006) (4966 . 5007) (t 25315 34875 958480 289000)) nil (25315 34888 815559 847000) 0 nil])
([nil nil ((5006 . 5007)) nil (25315 34888 815551 815000) 0 nil])
([nil nil ((#("cartesian_to_index(i, j; N) = N*(j-1)+i
" 0 18 (fontified t face font-lock-function-name-face) 18 39 (fontified t) 39 40 (fontified t)) . 4967) (undo-tree-id278 . -39) (undo-tree-id279 . -40) (t 25315 34888 825076 351000)) nil (25315 34892 74926 517000) 0 nil])
([nil nil ((nil rear-nonsticky nil 186 . 187) (#("
" 0 1 (fontified nil)) . -226) (186 . 227) 106) nil (25315 34892 74908 777000) 0 nil])
([nil nil ((nil rear-nonsticky nil 227 . 228) (#("
" 0 1 (fontified nil)) . -274) (227 . 275) (t 25315 34892 85058 462000)) nil (25315 34901 959544 404000) 0 nil])
([nil nil ((274 . 275)) nil (25315 34901 959537 699000) 0 nil])
([nil nil ((#("function discretization(x::AbstractVector; alg = DiscretizeUniformWidth(:scott))
    be = binedges(alg, x)
    disc = LinearDiscretizer(be)
    bi = encode(disc, x)
    return be, bi
end

function discretizations_bulk(X::AbstractMatrix; alg = DiscretizeBayesianBlocks())
    binedges_all = [binedges(alg, x) for x in eachcol(X)]
    discretizers_all = map(LinearDiscretizer, binedges_all)
    # counts_all = [get_discretization_counts(d, x) for (d, x) in zip(discretizers_all, eachcol(X))]
    binids_all = [encode(discretizers_all[i], X[:, i]) for i = 1:size(X, 2)]
    return discretizers_all, binedges_all, binids_all
end

#=
function discretized_joint_distribution(prod::AbstractMatrix, X::AbstractMatrix, i::Int, j::Int, binids_i::Vector{Int}, binids_j::Vector{Int}, binedges_i::AbstractVector, binedges_j::AbstractVector)
    # computes the discrete joint distribution of 
    # (X[i], X_next[j], X[j])
    π_genes = zeros(length(binedges_i), length(binedges_j), length(binedges_j))
    @inbounds for m = 1:size(X, 1)
        @inbounds for n = 1:size(X, 1)
            π_genes[binids_i[m], binids_j[n], binids_j[m]] += prod[m, n] 
        end
    end
    return π_genes
end
=#

function discretized_joint_distribution(prod::AbstractSparseMatrix, X0::AbstractMatrix, X1::AbstractMatrix, i::Int, j::Int; alg = DiscretizeUniformWidth(:scott))
    row_idxs = findnz(sum(prod; dims = 2))[1]
    col_idxs = findnz(sum(prod; dims = 1))[2]
    binedges_i_prev, binids_i_prev = discretization(X0[row_idxs, i]; alg = alg)
    binedges_j_next, binids_j_next = discretization(X1[col_idxs, j]; alg = alg)
    binedges_j_prev, binids_j_prev = discretization(X0[row_idxs, j]; alg = alg)
    discretized_joint_distribution(prod[row_idxs, :][:, col_idxs], 
                                    binids_i_prev, binids_j_next, binids_j_prev,
                                    binedges_i_prev, binedges_j_next, binedges_j_prev)
end

function discretized_joint_distribution_undir(prod::AbstractSparseMatrix, X::AbstractMatrix, i::Int, j::Int; alg = DiscretizeUniformWidth(:scott))
    row_idxs = findnz(sum(prod; dims = 2))[1]
    col_idxs = findnz(sum(prod; dims = 1))[2]
    binedges_i, binids_i = discretization(X[row_idxs, i]; alg = alg)
    binedges_j, binids_j = discretization(X[col_idxs, j]; alg = alg)
    discretized_joint_distribution_undir(prod[row_idxs, :][:, col_idxs],
                                        binids_i, binids_j,
                                        binedges_i, binedges_j)
end

function discretized_joint_distribution_undir(p::AbstractSparseVector, X::AbstractMatrix, i::Int, j::Int; alg = DiscretizeUniformWidth(:scott))
    idxs = findnz(p)[1]
    binedges_i, binids_i = discretization(X[idxs, i]; alg = alg)
    binedges_j, binids_j = discretization(X[idxs, j]; alg = alg)
    discretized_joint_distribution_undir(p[idxs],
                                        binids_i, binids_j,
                                        binedges_i, binedges_j)
end

function discretized_joint_distribution(prod::AbstractSparseMatrix, 
                                        binids_i_prev::Vector{Int}, binids_j_next::Vector{Int}, binids_j_prev::Vector{Int}, 
                                        binedges_i_prev::AbstractVector, binedges_j_next::AbstractVector, binedges_j_prev::AbstractVector)
    # computes the discrete joint distribution of 
    # (X[i], X_next[j], X[j])
    π_genes = zeros(length(binedges_i_prev)-1, length(binedges_j_next)-1, length(binedges_j_prev)-1) # this should be relatively small...
    for (m, n, p) in zip(findnz(prod)...)
            π_genes[binids_i_prev[m], binids_j_next[n], binids_j_prev[m]] += p
    end
    return π_genes
end

function discretized_joint_distribution_undir(p::AbstractSparseVector,
                                             binids_i::Vector{Int}, binids_j::Vector{Int},
                                             binedges_i::AbstractVector, binedges_j::AbstractVector)
    # compute the discrete joint distribution of (X[i], X[j])
    π_genes = zeros(length(binedges_i)-1, length(binedges_j)-1) # this should be relatively small...
    for (m, q) in zip(findnz(p)...)
            π_genes[binids_i[m], binids_j[m]] += q
    end
    return π_genes
end

function discretized_joint_distribution_undir(prod::AbstractSparseMatrix,
                                             binids_i::Vector{Int}, binids_j::Vector{Int},
                                             binedges_i::AbstractVector, binedges_j::AbstractVector)
    # compute the discrete joint distribution of (X[i], X[j])
    π_genes = zeros(length(binedges_i)-1, length(binedges_j)-1) # this should be relatively small...
    for (m, n, p) in zip(findnz(prod)...)
            π_genes[binids_i[m], binids_j[n]] += p
    end
    return π_genes
end

" 0 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 23 (fontified t face font-lock-function-name-face) 23 27 (fontified t) 27 41 (fontified t face font-lock-type-face) 41 72 (fontified t) 72 78 (fontified t face julia-quoted-symbol-face) 78 81 (fontified t) 81 169 (fontified t) 169 175 (fontified t face font-lock-keyword-face) 175 183 (fontified t) 183 186 (fontified t face font-lock-keyword-face) 186 188 (fontified t) 188 196 (fontified t face font-lock-keyword-face) 196 197 (fontified t) 197 217 (fontified t face font-lock-function-name-face) 217 221 (fontified t) 221 235 (fontified t face font-lock-type-face) 235 308 (fontified t) 308 311 (fontified t face font-lock-keyword-face) 311 314 (fontified t) 314 316 (fontified t face font-lock-keyword-face) 316 393 (fontified t) 393 395 (fontified t face font-lock-comment-delimiter-face) 395 490 (fontified t face font-lock-comment-face) 490 545 (fontified t) 545 548 (fontified t face font-lock-keyword-face) 548 551 (fontified t) 551 552 (fontified t face font-lock-keyword-face) 552 571 (fontified t) 571 577 (fontified t face font-lock-keyword-face) 577 621 (fontified t) 621 624 (fontified t face font-lock-keyword-face) 624 625 (fontified t) 625 626 (fontified t) 626 627 (fontified t face font-lock-comment-delimiter-face) 627 629 (fontified t face font-lock-comment-face) 629 1182 (fontified t face font-lock-comment-face) 1182 1184 (fontified t) 1184 1192 (fontified t face font-lock-keyword-face) 1192 1193 (fontified t) 1193 1223 (fontified t face font-lock-function-name-face) 1223 1230 (fontified t) 1230 1250 (fontified t face font-lock-type-face) 1250 1256 (fontified t) 1256 1270 (fontified t face font-lock-type-face) 1270 1276 (fontified t) 1276 1277 (fontified t face font-lock-type-face) 1277 1290 (fontified t face font-lock-type-face) 1290 1295 (fontified t) 1295 1298 (fontified t face font-lock-type-face) 1298 1303 (fontified t) 1303 1306 (fontified t face font-lock-type-face) 1306 1337 (fontified t) 1337 1343 (fontified t face julia-quoted-symbol-face) 1343 1346 (fontified t) 1346 1452 (fontified t) 1452 1499 (fontified t) 1499 1500 (fontified t) 1500 1518 (fontified t) 1518 1581 (fontified t) 1581 1598 (fontified t) 1598 1914 (fontified t) 1914 1917 (fontified t face font-lock-keyword-face) 1917 1919 (fontified t) 1919 1927 (fontified t face font-lock-keyword-face) 1927 1928 (fontified t) 1928 1964 (fontified t face font-lock-function-name-face) 1964 1971 (fontified t) 1971 1991 (fontified t face font-lock-type-face) 1991 1996 (fontified t) 1996 2010 (fontified t face font-lock-type-face) 2010 2015 (fontified t) 2015 2018 (fontified t face font-lock-type-face) 2018 2023 (fontified t) 2023 2026 (fontified t face font-lock-type-face) 2026 2057 (fontified t) 2057 2063 (fontified t face julia-quoted-symbol-face) 2063 2125 (fontified t) 2125 2129 (fontified t) 2129 2158 (fontified t) 2158 2493 (fontified t) 2493 2496 (fontified t face font-lock-keyword-face) 2496 2498 (fontified t) 2498 2506 (fontified t face font-lock-keyword-face) 2506 2507 (fontified t) 2507 2543 (fontified t face font-lock-function-name-face) 2543 2547 (fontified t) 2547 2567 (fontified t face font-lock-type-face) 2567 2572 (fontified t) 2572 2586 (fontified t face font-lock-type-face) 2586 2591 (fontified t) 2591 2594 (fontified t face font-lock-type-face) 2594 2599 (fontified t) 2599 2602 (fontified t face font-lock-type-face) 2602 2633 (fontified t) 2633 2639 (fontified t face julia-quoted-symbol-face) 2639 2846 (fontified t) 2846 2970 (fontified t) 2970 2973 (fontified t face font-lock-keyword-face) 2973 2974 (fontified t) 2974 2975 (fontified t) 2975 2983 (fontified t face font-lock-keyword-face) 2983 2984 (fontified t) 2984 3014 (fontified t face font-lock-function-name-face) 3014 3018 (fontified t) 3018 3021 (fontified t) 3021 3041 (face font-lock-type-face fontified t) 3041 3044 (fontified t) 3044 3098 (fontified t) 3098 3099 (fontified t) 3099 3105 (fontified t face font-lock-type-face) 3105 3127 (fontified t) 3127 3133 (fontified t face font-lock-type-face) 3133 3155 (fontified t) 3155 3161 (fontified t face font-lock-type-face) 3161 3169 (fontified t) 3169 3226 (fontified t) 3226 3240 (fontified t face font-lock-type-face) 3240 3259 (fontified t) 3259 3273 (fontified t face font-lock-type-face) 3273 3292 (fontified t) 3292 3306 (fontified t face font-lock-type-face) 3306 3312 (fontified t) 3312 3314 (fontified t face font-lock-comment-delimiter-face) 3314 3359 (fontified t face font-lock-comment-face) 3359 3363 (fontified t) 3363 3365 (fontified t face font-lock-comment-delimiter-face) 3365 3389 (fontified t face font-lock-comment-face) 3389 3490 (fontified t) 3490 3492 (fontified t face font-lock-comment-delimiter-face) 3492 3527 (fontified t face font-lock-comment-face) 3527 3531 (fontified t) 3531 3534 (fontified t face font-lock-keyword-face) 3534 3545 (fontified t) 3545 3547 (fontified t face font-lock-keyword-face) 3547 3652 (fontified t) 3652 3655 (fontified t face font-lock-keyword-face) 3655 3658 (fontified t) 3658 3660 (fontified t) 3660 3666 (fontified t face font-lock-keyword-face) 3666 3675 (fontified t) 3675 3678 (fontified t face font-lock-keyword-face) 3678 3679 (fontified t) 3679 3680 (fontified t) 3680 3688 (fontified t face font-lock-keyword-face) 3688 3689 (fontified t) 3689 3725 (fontified t face font-lock-function-name-face) 3725 3729 (fontified t) 3729 3749 (fontified t face font-lock-type-face) 3749 3806 (fontified t) 3806 3812 (fontified t face font-lock-type-face) 3812 3829 (fontified t) 3829 3835 (fontified t face font-lock-type-face) 3835 3899 (fontified t) 3899 3913 (fontified t face font-lock-type-face) 3913 3927 (fontified t) 3927 3941 (fontified t face font-lock-type-face) 3941 3947 (fontified t) 3947 3949 (fontified t face font-lock-comment-delimiter-face) 3949 4005 (fontified t face font-lock-comment-face) 4005 4069 (fontified t) 4069 4071 (fontified t face font-lock-comment-delimiter-face) 4071 4106 (fontified t face font-lock-comment-face) 4106 4110 (fontified t) 4110 4113 (fontified t face font-lock-keyword-face) 4113 4121 (fontified t) 4121 4123 (fontified t face font-lock-keyword-face) 4123 4197 (fontified t) 4197 4200 (fontified t face font-lock-keyword-face) 4200 4205 (fontified t) 4205 4211 (fontified t face font-lock-keyword-face) 4211 4220 (fontified t) 4220 4223 (fontified t face font-lock-keyword-face) 4223 4225 (fontified t) 4225 4233 (fontified t face font-lock-keyword-face) 4233 4234 (fontified t) 4234 4270 (fontified t face font-lock-function-name-face) 4270 4277 (fontified t) 4277 4297 (fontified t face font-lock-type-face) 4297 4354 (fontified t) 4354 4360 (fontified t face font-lock-type-face) 4360 4377 (fontified t) 4377 4383 (fontified t face font-lock-type-face) 4383 4447 (fontified t) 4447 4461 (fontified t face font-lock-type-face) 4461 4474 (fontified t) 4474 4475 (fontified t) 4475 4489 (fontified t face font-lock-type-face) 4489 4491 (fontified t) 4491 4495 (fontified t) 4495 4497 (fontified t face font-lock-comment-delimiter-face) 4497 4544 (fontified t face font-lock-comment-face) 4544 4553 (face font-lock-comment-face fontified t) 4553 4617 (fontified t) 4617 4619 (fontified t face font-lock-comment-delimiter-face) 4619 4654 (fontified t face font-lock-comment-face) 4654 4658 (fontified t) 4658 4661 (fontified t face font-lock-keyword-face) 4661 4669 (fontified t) 4669 4672 (fontified t) 4672 4674 (fontified t face font-lock-keyword-face) 4674 4696 (fontified t) 4696 4751 (fontified t) 4751 4754 (fontified t face font-lock-keyword-face) 4754 4759 (fontified t) 4759 4765 (fontified t face font-lock-keyword-face) 4765 4774 (fontified t) 4774 4777 (fontified t face font-lock-keyword-face) 4777 4778 (fontified t) 4778 4779 (rear-nonsticky t fontified t)) . 276) (undo-tree-id415 . -4778) (undo-tree-id416 . -4778) (undo-tree-id417 . -625) (undo-tree-id418 . -187) (undo-tree-id419 . -187) (undo-tree-id420 . -625) (undo-tree-id421 . -626) (undo-tree-id422 . -626) (undo-tree-id423 . -626) (undo-tree-id424 . -1183) (undo-tree-id425 . -1183) (undo-tree-id426 . -1918) (undo-tree-id427 . -1918) (undo-tree-id428 . -2497) (undo-tree-id429 . -2497) (undo-tree-id430 . -2974) (undo-tree-id431 . -2974) (undo-tree-id432 . -3679) (undo-tree-id433 . -3679) (undo-tree-id434 . -4224) (undo-tree-id435 . -4224) (undo-tree-id436 . -4778) (undo-tree-id437 . -3679) (undo-tree-id438 . -4778) (undo-tree-id439 . -4778) (undo-tree-id440 . -187) (undo-tree-id441 . -625) (undo-tree-id442 . -1183) (undo-tree-id443 . -1918) (undo-tree-id444 . -2497) (undo-tree-id445 . -2974) (undo-tree-id446 . -3679) (undo-tree-id447 . -4224) 5054 (t 25315 34901 968337 561000)) nil (25315 34936 33550 299000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 275) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . 1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1)) nil (25315 34936 33470 261000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 227) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (t 25315 34936 41483 920000)) nil (25315 34937 830744 186000) 0 nil])
([nil nil ((#("prox_l1(x; λ = 1.0) = sign(x)*relu(abs(x) - λ)
" 0 7 (fontified t face font-lock-function-name-face) 7 47 (fontified t)) . 227) (undo-tree-id475 . -45) (undo-tree-id476 . -46) (undo-tree-id477 . -45) (undo-tree-id478 . -45) (undo-tree-id479 . -47) (undo-tree-id480 . -47) (undo-tree-id481 . -47) (undo-tree-id482 . -47) (undo-tree-id483 . -47) (undo-tree-id484 . -47) (undo-tree-id485 . -47) (undo-tree-id486 . -47) (undo-tree-id487 . -47) (undo-tree-id488 . -47) (undo-tree-id489 . -47) (undo-tree-id490 . -47) (undo-tree-id491 . -47) (undo-tree-id492 . -47) (undo-tree-id493 . -47) (undo-tree-id494 . -47) (undo-tree-id495 . -47) (undo-tree-id496 . -47) (undo-tree-id497 . -47) (undo-tree-id498 . -47) (undo-tree-id499 . -46) (undo-tree-id500 . -47) (undo-tree-id501 . -47) (undo-tree-id502 . -47) (undo-tree-id503 . -47) (undo-tree-id504 . -47) (undo-tree-id505 . -47) (undo-tree-id506 . -47) (undo-tree-id507 . -47) (undo-tree-id508 . -47) (undo-tree-id509 . -45) (undo-tree-id510 . -45) (undo-tree-id511 . -45) 272 (t 25315 34937 841474 43000)) nil (25324 38898 202978 186000) 0 nil])
([nil nil ((nil rear-nonsticky nil 281 . 282) (nil fontified nil 227 . 282) (227 . 282) (t 25315 35013 1061 608000)) nil (25324 38904 367550 566000) 0 nil] [nil nil ((nil rear-nonsticky nil 232 . 233) (nil fontified nil 227 . 233) (227 . 233) (t 25315 35013 1061 608000)) ((#("opt.jl" 0 5 (fontified nil) 5 6 (fontified nil rear-nonsticky nil)) . 227) (undo-tree-id0 . -5) (undo-tree-id1 . -5) (nil rear-nonsticky t 232 . 233)) (25324 38898 202537 871000) 0 nil])
([nil nil ((227 . 228)) nil (25324 38904 367546 158000) 0 nil])
nil
([nil nil ((283 . 284)) nil (25324 38904 367537 232000) 0 nil])
([nil nil ((283 . 284) (t 25324 38904 370572 363000)) nil (25324 38905 875759 782000) 0 nil])
([nil nil ((nil rear-nonsticky nil 576 . 577) (nil fontified nil 285 . 577) (285 . 577) (t 25324 38905 883905 798000)) nil (25324 38916 236535 108000) 0 nil])
([nil nil ((577 . 578)) nil (25324 38926 733488 106000) 0 nil])
([nil nil ((234 . 250) (t 25324 38916 243906 489000)) nil (25324 38935 397284 198000) 0 nil] [nil nil ((236 . 242) (234 . 236) (t 25324 38916 243906 489000)) ((#("::" 0 2 (fontified nil)) . 234) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (#("Abstra" 0 6 (fontified t face font-lock-type-face)) . 236) (undo-tree-id4 . -5) (undo-tree-id5 . -5)) (25324 38926 732996 107000) 0 nil])
([nil nil ((253 . 269)) nil (25324 38935 397274 109000) 0 nil])
nil
([nil nil ((343 . 357) (#("Abstract" 0 8 (fontified t face font-lock-type-face)) . -343) (undo-tree-id6 . -8) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -3) (undo-tree-id12 . -3) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -4) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -5) (undo-tree-id41 . -5) (undo-tree-id42 . -5) (undo-tree-id43 . -5) (undo-tree-id44 . -5) (undo-tree-id45 . -5) (undo-tree-id46 . -5) (undo-tree-id47 . -5) (undo-tree-id48 . -5) (undo-tree-id49 . -5) (undo-tree-id50 . -5) (undo-tree-id51 . -5) (undo-tree-id52 . -5) (undo-tree-id53 . -5) (undo-tree-id54 . -5) (undo-tree-id55 . -5) (undo-tree-id56 . -5) (undo-tree-id57 . -5) (undo-tree-id58 . -5) (undo-tree-id59 . -5) (undo-tree-id60 . -5) (undo-tree-id61 . -5) (undo-tree-id62 . -5) (undo-tree-id63 . -5) (undo-tree-id64 . -5) (undo-tree-id65 . -5) (undo-tree-id66 . -5) (undo-tree-id67 . -6) (undo-tree-id68 . -6) (undo-tree-id69 . -6) (undo-tree-id70 . -6) (undo-tree-id71 . -6) (undo-tree-id72 . -6) (undo-tree-id73 . -6) (undo-tree-id74 . -6) (undo-tree-id75 . -6) (undo-tree-id76 . -6) (undo-tree-id77 . -6) (undo-tree-id78 . -6) (undo-tree-id79 . -6) (undo-tree-id80 . -6) (undo-tree-id81 . -6) (undo-tree-id82 . -6) (undo-tree-id83 . -6) (undo-tree-id84 . -6) (undo-tree-id85 . -6) (undo-tree-id86 . -6) (undo-tree-id87 . -6) (undo-tree-id88 . -6) (undo-tree-id89 . -6) (undo-tree-id90 . -6) (undo-tree-id91 . -6) (undo-tree-id92 . -6) (undo-tree-id93 . -6) (undo-tree-id94 . -7) (undo-tree-id95 . -7) (undo-tree-id96 . -7) (undo-tree-id97 . -7) (undo-tree-id98 . -7) (undo-tree-id99 . -7) (undo-tree-id100 . -7) (undo-tree-id101 . -7) (undo-tree-id102 . -7) (undo-tree-id103 . -7) (undo-tree-id104 . -7) (undo-tree-id105 . -7) (undo-tree-id106 . -7) (undo-tree-id107 . -7) (undo-tree-id108 . -7) (undo-tree-id109 . -7) (undo-tree-id110 . -7) (undo-tree-id111 . -7) (undo-tree-id112 . -7) (undo-tree-id113 . -7) (undo-tree-id114 . -7) (undo-tree-id115 . -7) (undo-tree-id116 . -7) (undo-tree-id117 . -7) (undo-tree-id118 . -7) (undo-tree-id119 . -7) (undo-tree-id120 . -7) (undo-tree-id121 . -8) (undo-tree-id122 . -8) (undo-tree-id123 . -8) (undo-tree-id124 . -8) (undo-tree-id125 . -8) (undo-tree-id126 . -8) (undo-tree-id127 . -8) (undo-tree-id128 . -8) (undo-tree-id129 . -8) (undo-tree-id130 . -8) (undo-tree-id131 . -8) (undo-tree-id132 . -8) (undo-tree-id133 . -8) (undo-tree-id134 . -8) (undo-tree-id135 . -8) (undo-tree-id136 . -8) (undo-tree-id137 . -8) (undo-tree-id138 . -8) (undo-tree-id139 . -8) (undo-tree-id140 . -8) (undo-tree-id141 . -8) (undo-tree-id142 . -8) (undo-tree-id143 . -8) (undo-tree-id144 . -8) (undo-tree-id145 . -8) (undo-tree-id146 . -8) (undo-tree-id147 . -8) (undo-tree-id148 . -8) (undo-tree-id149 . -8) (undo-tree-id150 . -8) (undo-tree-id151 . -8) (undo-tree-id152 . -8) (undo-tree-id153 . -8) (undo-tree-id154 . -8) (undo-tree-id155 . -8) (undo-tree-id156 . -8) (undo-tree-id157 . -8) (undo-tree-id158 . -8) (undo-tree-id159 . -8) (undo-tree-id160 . -8) (undo-tree-id161 . -8) (undo-tree-id162 . -8) (undo-tree-id163 . -8) (undo-tree-id164 . -8) (undo-tree-id165 . -8) (undo-tree-id166 . -8) (undo-tree-id167 . -8) (undo-tree-id168 . -8) (undo-tree-id169 . -8) (undo-tree-id170 . -8) (undo-tree-id171 . -8) (undo-tree-id172 . -8) (undo-tree-id173 . -8) (undo-tree-id174 . -8) (undo-tree-id175 . -8) 351 (341 . 351) (t 25324 38935 403907 768000)) nil (25324 38971 108064 305000) 0 nil])
([nil nil ((360 . 376)) nil (25324 38971 107765 299000) 0 nil])
([nil nil ((379 . 386) (t 25324 38971 113910 154000)) nil (25324 39000 38767 572000) 0 nil])
([nil nil ((381 . 385) (#("Floats" 0 6 (fontified t face font-lock-type-face)) . -381) (undo-tree-id176 . -6) 387 (386 . 387)) nil (25324 39000 38758 515000) 0 nil])
([nil nil ((#("max" 0 3 (fontified t)) . 27) (undo-tree-id471 . -1) 28 (t 25324 39000 47245 419000)) nil (25324 40266 298660 827000) 0 nil])
([nil nil ((27 . 30) (#(" " 0 1 (fontified t)) . -27) (undo-tree-id470 . -1) 28 (27 . 28)) nil (25324 40266 298656 78000) 0 nil])
([nil nil ((#("sum.(A, A') # " 0 12 (fontified t) 12 14 (fontified t face font-lock-comment-delimiter-face)) . 27) (undo-tree-id177 . -13) (undo-tree-id178 . 11) (undo-tree-id179 . -13) (undo-tree-id180 . -13) (undo-tree-id181 . -2) (undo-tree-id182 . -2) (undo-tree-id183 . -2) (undo-tree-id184 . -2) (undo-tree-id185 . -2) (undo-tree-id186 . -2) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -2) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -2) (undo-tree-id195 . -2) (undo-tree-id196 . -2) (undo-tree-id197 . -2) (undo-tree-id198 . -2) (undo-tree-id199 . -2) (undo-tree-id200 . -2) (undo-tree-id201 . -2) (undo-tree-id202 . -2) (undo-tree-id203 . -2) (undo-tree-id204 . -2) (undo-tree-id205 . -2) (undo-tree-id206 . -2) (undo-tree-id207 . -2) (undo-tree-id208 . -2) (undo-tree-id209 . -2) (undo-tree-id210 . -2) (undo-tree-id211 . -2) (undo-tree-id212 . -2) (undo-tree-id213 . -2) (undo-tree-id214 . -2) (undo-tree-id215 . -2) (undo-tree-id216 . -2) (undo-tree-id217 . -2) (undo-tree-id218 . -2) (undo-tree-id219 . -2) (undo-tree-id220 . -2) (undo-tree-id221 . -2) (undo-tree-id222 . -2) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -14) (undo-tree-id278 . -13) (undo-tree-id279 . -2) (undo-tree-id280 . -2) (undo-tree-id281 . -2) (undo-tree-id282 . -2) (undo-tree-id283 . -2) (undo-tree-id284 . -2) (undo-tree-id285 . -2) (undo-tree-id286 . -2) (undo-tree-id287 . -2) (undo-tree-id288 . -2) (undo-tree-id289 . -2) (undo-tree-id290 . -2) (undo-tree-id291 . -2) (undo-tree-id292 . -2) (undo-tree-id293 . -2) (undo-tree-id294 . -2) (undo-tree-id295 . -2) (undo-tree-id296 . -2) (undo-tree-id297 . -2) (undo-tree-id298 . -2) (undo-tree-id299 . -2) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (undo-tree-id303 . -2) (undo-tree-id304 . -2) (undo-tree-id305 . -2) (undo-tree-id306 . -3) (undo-tree-id307 . -3) (undo-tree-id308 . -3) (undo-tree-id309 . -3) (undo-tree-id310 . -3) (undo-tree-id311 . -3) (undo-tree-id312 . -3) (undo-tree-id313 . -3) (undo-tree-id314 . -3) (undo-tree-id315 . -3) (undo-tree-id316 . -3) (undo-tree-id317 . -3) (undo-tree-id318 . -3) (undo-tree-id319 . -3) (undo-tree-id320 . -3) (undo-tree-id321 . -3) (undo-tree-id322 . -3) (undo-tree-id323 . -3) (undo-tree-id324 . -3) (undo-tree-id325 . -3) (undo-tree-id326 . -3) (undo-tree-id327 . -3) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -3) (undo-tree-id332 . -3) (undo-tree-id333 . -4) (undo-tree-id334 . -4) (undo-tree-id335 . -4) (undo-tree-id336 . -4) (undo-tree-id337 . -4) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -4) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -4) (undo-tree-id345 . -4) (undo-tree-id346 . -4) (undo-tree-id347 . -4) (undo-tree-id348 . -4) (undo-tree-id349 . -4) (undo-tree-id350 . -4) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -4) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4) (undo-tree-id358 . -4) (undo-tree-id359 . -4) (undo-tree-id360 . -4) (undo-tree-id361 . -10) (undo-tree-id362 . -10) (undo-tree-id363 . -10) (undo-tree-id364 . -10) (undo-tree-id365 . -10) (undo-tree-id366 . -10) (undo-tree-id367 . -10) (undo-tree-id368 . -10) (undo-tree-id369 . -10) (undo-tree-id370 . -10) (undo-tree-id371 . -10) (undo-tree-id372 . -10) (undo-tree-id373 . -10) (undo-tree-id374 . -10) (undo-tree-id375 . -10) (undo-tree-id376 . -10) (undo-tree-id377 . -10) (undo-tree-id378 . -10) (undo-tree-id379 . -10) (undo-tree-id380 . -10) (undo-tree-id381 . -10) (undo-tree-id382 . -10) (undo-tree-id383 . -10) (undo-tree-id384 . -10) (undo-tree-id385 . -10) (undo-tree-id386 . -10) (undo-tree-id387 . -10) (undo-tree-id388 . -11) (undo-tree-id389 . -11) (undo-tree-id390 . -11) (undo-tree-id391 . -11) (undo-tree-id392 . -11) (undo-tree-id393 . -11) (undo-tree-id394 . -11) (undo-tree-id395 . -11) (undo-tree-id396 . -11) (undo-tree-id397 . -11) (undo-tree-id398 . -11) (undo-tree-id399 . -11) (undo-tree-id400 . -11) (undo-tree-id401 . -11) (undo-tree-id402 . -11) (undo-tree-id403 . -11) (undo-tree-id404 . -11) (undo-tree-id405 . -11) (undo-tree-id406 . -11) (undo-tree-id407 . -11) (undo-tree-id408 . -11) (undo-tree-id409 . -11) (undo-tree-id410 . -11) (undo-tree-id411 . -11) (undo-tree-id412 . -11) (undo-tree-id413 . -11) (undo-tree-id414 . -11) (undo-tree-id415 . -12) (undo-tree-id416 . -12) (undo-tree-id417 . -12) (undo-tree-id418 . -12) (undo-tree-id419 . -12) (undo-tree-id420 . -12) (undo-tree-id421 . -12) (undo-tree-id422 . -12) (undo-tree-id423 . -12) (undo-tree-id424 . -12) (undo-tree-id425 . -12) (undo-tree-id426 . -12) (undo-tree-id427 . -12) (undo-tree-id428 . -12) (undo-tree-id429 . -12) (undo-tree-id430 . -12) (undo-tree-id431 . -12) (undo-tree-id432 . -12) (undo-tree-id433 . -12) (undo-tree-id434 . -12) (undo-tree-id435 . -12) (undo-tree-id436 . -12) (undo-tree-id437 . -12) (undo-tree-id438 . -12) (undo-tree-id439 . -12) (undo-tree-id440 . -12) (undo-tree-id441 . -12) (undo-tree-id442 . -13) (undo-tree-id443 . -13) (undo-tree-id444 . -13) (undo-tree-id445 . -13) (undo-tree-id446 . -13) (undo-tree-id447 . -13) (undo-tree-id448 . -13) (undo-tree-id449 . -13) (undo-tree-id450 . -13) (undo-tree-id451 . -13) (undo-tree-id452 . -13) (undo-tree-id453 . -13) (undo-tree-id454 . -13) (undo-tree-id455 . -13) (undo-tree-id456 . -13) (undo-tree-id457 . -13) (undo-tree-id458 . -13) (undo-tree-id459 . -13) (undo-tree-id460 . -13) (undo-tree-id461 . -13) (undo-tree-id462 . -13) (undo-tree-id463 . -13) (undo-tree-id464 . -13) (undo-tree-id465 . -13) (undo-tree-id466 . -13) (undo-tree-id467 . -13) (undo-tree-id468 . -13) (undo-tree-id469 . -13) 40) nil (25324 40266 298626 725000) 0 nil])
([nil nil ((659 . 664) (657 . 659) (649 . 657) (#("rate" 0 4 (fontified t face font-lock-function-name-face)) . -649) (undo-tree-id488 . -4) 653 (644 . 653) (#("compu" 0 5 (fontified t face font-lock-function-name-face)) . -644) (undo-tree-id489 . -5) 649 (644 . 649) (#("get" 0 3 (fontified t face font-lock-function-name-face)) . -644) (undo-tree-id490 . -3) 647 (635 . 647) (#("function " 0 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t)) . -635) (undo-tree-id491 . -9) 644 (635 . 644) (634 . 635) (t 25324 40266 307329 962000)) nil (25324 40564 732984 834000) 0 nil])
([nil nil ((nil rear-nonsticky nil 758 . 759) (nil fontified nil 663 . 759) (663 . 759)) nil (25324 40564 732973 583000) 0 nil])
([nil nil ((761 . 764) (757 . 761) (#(" " 0 1 (fontified nil)) . 756) (undo-tree-id487 . -1) (#("   " 0 3 (fontified nil)) . -664) (760 . 761)) nil (25324 40564 732970 528000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -757) 763) nil (25324 40564 732966 210000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-type-face)) . -703) (undo-tree-id482 . -1) (#("g" 0 1 (fontified t face font-lock-type-face)) . -704) (undo-tree-id483 . -1) 705 (698 . 705) (#(" " 0 1 (fontified t)) . -698) (undo-tree-id484 . -1) 699 (696 . 699) (#("q" 0 1 (fontified t)) . -696) (undo-tree-id485 . -1) 697 (#(":;" 0 2 (fontified t)) . -697) (undo-tree-id486 . -2) 699 (679 . 699) (658 . 679)) nil (25324 40564 732961 702000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -707) (undo-tree-id472 . -1) 708 (700 . 708) (#("Int64" 0 5 (fontified t face font-lock-type-face)) . -700) (undo-tree-id473 . -5) 705 (701 . 705) (#("N" 0 1 (fontified t face font-lock-type-face)) . -701) (undo-tree-id474 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -702) (undo-tree-id475 . -1) (#("6" 0 1 (fontified t face font-lock-type-face)) . -703) (undo-tree-id476 . -1) (#("5" 0 1 (fontified t face font-lock-type-face)) . -704) (undo-tree-id477 . -1) 705 (700 . 705) (#("Integer" 0 7 (fontified t face font-lock-type-face)) . -700) (undo-tree-id478 . -7) 707 (700 . 707) (#("Integer" 0 7 (fontified t face font-lock-type-face)) . -700) (undo-tree-id479 . -7) 707 (706 . 707) (#("t" 0 1 (fontified t face font-lock-type-face)) . -706) (undo-tree-id480 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -707) (undo-tree-id481 . -1) 708 (703 . 708)) nil (25324 40564 732945 312000) 0 nil])
([nil nil ((809 . 810)) nil (25324 40564 732898 426000) 0 nil])
([nil nil ((709 . 718) (#("J" 0 1 (fontified t)) . -709) (undo-tree-id492 . -1) (#("_" 0 1 (fontified t)) . -710) (undo-tree-id493 . -1) 711 (#("thresh " 0 7 (fontified t)) . -711) (undo-tree-id494 . -7) 718 (707 . 718) (t 25324 40564 740683 219000)) nil (25324 40570 373478 405000) 0 nil])
([nil nil ((#("mi_all[k][1]" 0 12 (fontified t)) . 759) (undo-tree-id495 . -11) (undo-tree-id496 . -11) (undo-tree-id497 . -11) (undo-tree-id498 . -11) (undo-tree-id499 . 1) (undo-tree-id500 . -12) (undo-tree-id501 . 3) (undo-tree-id502 . -10) 770 (t 25324 40570 380683 595000)) nil (25324 40582 236340 631000) 0 nil])
([nil nil ((759 . 760)) nil (25324 40582 236304 675000) 0 nil])
([nil nil ((#("250" 0 3 (fontified t)) . 795) (undo-tree-id505 . -2) 797 (t 25324 40582 244017 721000)) nil (25324 40594 65824 247000) 0 nil])
([nil nil ((796 . 797) (#(" " 0 1 (fontified t)) . -796) (undo-tree-id503 . -1) (#("q" 0 1 (fontified t)) . -797) (undo-tree-id504 . -1) 798 (795 . 798)) nil (25324 40594 65818 366000) 0 nil])
([nil nil ((763 . 774)) nil (25324 40594 65793 671000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 724) (t 25324 40594 74018 510000)) nil (25324 40596 387699 842000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 724)) nil (25324 40596 387697 648000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 724)) nil (25324 40596 387695 83000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 724)) nil (25324 40596 387685 816000) 0 nil])
([nil nil ((724 . 734) (719 . 724) (t 25324 40596 390685 331000)) nil (25324 40801 992978 289000) 0 nil])
([nil current ((#("    @info \"hi\"
" 0 4 (fontified t) 4 9 (fontified t face julia-macro-face) 9 10 (fontified t) 10 14 (fontified t face font-lock-string-face) 14 15 (fontified t)) . 720) (undo-tree-id506 . 1) (undo-tree-id507 . -13) (undo-tree-id508 . -13) (undo-tree-id509 . -13) (undo-tree-id510 . -13) (undo-tree-id511 . -13) (undo-tree-id512 . -13) (undo-tree-id513 . -13) (undo-tree-id514 . -13) (undo-tree-id515 . -13) (undo-tree-id516 . -13) (undo-tree-id517 . -13) (undo-tree-id518 . -13) (undo-tree-id519 . -13) (undo-tree-id520 . -13) (undo-tree-id521 . -13) (undo-tree-id522 . -13) (undo-tree-id523 . -13) (undo-tree-id524 . -13) (undo-tree-id525 . -13) (undo-tree-id526 . -13) (undo-tree-id527 . -13) (undo-tree-id528 . -13) (undo-tree-id529 . -13) (undo-tree-id530 . -13) (undo-tree-id531 . -15) (undo-tree-id532 . -15) (undo-tree-id533 . -15) (undo-tree-id534 . -15) (undo-tree-id535 . -15) (undo-tree-id536 . -15) (undo-tree-id537 . -15) (undo-tree-id538 . -15) (undo-tree-id539 . -15) (undo-tree-id540 . -15) (undo-tree-id541 . -15) (undo-tree-id542 . -15) (undo-tree-id543 . -15) (undo-tree-id544 . -15) (undo-tree-id545 . -15) (undo-tree-id546 . -15) (undo-tree-id547 . -15) (undo-tree-id548 . -15) (undo-tree-id549 . -15) (undo-tree-id550 . -15) (undo-tree-id551 . -15) (undo-tree-id552 . -15) (undo-tree-id553 . -15) (undo-tree-id554 . -15) (undo-tree-id555 . -15) (undo-tree-id556 . -15) (undo-tree-id557 . -15) (undo-tree-id558 . -15) (t 25324 40802 699 62000)) nil (25324 40834 144172 606000) 0 nil])
([nil nil ((657 . 658) (t 25324 40809 597366 236000)) ((#("2" 0 1 (fontified t face font-lock-function-name-face)) . 657) (t 25324 40826 180700 676000)) (25324 40826 172785 233000) 0 nil])
nil
